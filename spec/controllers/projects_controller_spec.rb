require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ProjectsController, type: :controller do

	# This should return the minimal set of attributes required to create a valid
	# Project. As you add validations to Project, be sure to
	# adjust the attributes here as well.
	let(:project) { FactoryGirl.create(:project) }
		
	let(:valid_attributes) {
		{ name: "Some name", description: "Some desc", url: "http://something.some" }
	}

	let(:invalid_attributes) {
		{ name: "a", description: "Some desc", url: "http://something.some" }
	}

	# This should return the minimal set of values that should be in the session
	# in order to pass any filters (e.g. authentication) defined in
	# ProjectsController. Be sure to keep this updated too.
	let(:valid_session) { {} }

	describe "GET #index" do
		it "assigns all projects as @projects" do
			get :index, {}, valid_session
			expect(assigns(:projects)).to eq([project])
		end
	end

	describe "GET #show" do
		it "assigns the requested project as @project" do
			get :show, {:id => project.to_param}, valid_session
			expect(assigns(:project)).to eq(project)
		end
	end

end
